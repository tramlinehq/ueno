# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane
default_platform(:ios)

platform :ios do
 desc "Load ASC API Key information to use in subsequent lanes"
 lane :load_asc_api_key do
   app_store_connect_api_key(
     key_id: ENV["ASC_KEY_ID"],
     issuer_id: ENV["ASC_ISSUER_ID"],
     key_content: ENV["ASC_KEY"],
     is_key_content_base64: true,
     in_house: false # detecting this via ASC private key not currently supported
   )
 end

 desc "Installs signing certificate in the keychain and downloads provisioning profiles from App Store Connect"
  lane :prepare_signing do |options|
    team_id = CredentialsManager::AppfileConfig.try_fetch_value(:team_id)
    api_key = lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]

    keychain_name = "signing"
    keychain_password = "temp"

    delete_keychain(
      name: keychain_name
    ) if File.exist? File.expand_path("~/Library/Keychains/#{keychain_name}-db")

    create_keychain(
      name: keychain_name,
      password: keychain_password,
      default_keychain: false,
      unlock: true,
      timeout: 3600
    )

    import_certificate(
      certificate_path: ENV["SIGNING_KEY_FILE_PATH"],
      certificate_password: ENV["SIGNING_KEY_PASSWORD"],
      keychain_name: keychain_name,
      keychain_password: keychain_password
    )

    # fetches and installs provisioning profiles from ASC
    sigh(
      adhoc: (options[:release] ? false : true),
      api_key: api_key,
      readonly: false
    )
  end

 desc "Upload to TestFlight / ASC"
 lane :upload_release do
  api_key = lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]

  deliver(
      api_key: api_key,
      skip_screenshots: true,
      skip_metadata: true,
      skip_app_version_update: true,
      force: true, # skips verification of HTML preview file (since this will be run from a CI machine)
      run_precheck_before_submit: false # not supported through ASC API yet
  )
 end

 desc "Build an ipa"
 lane :build_ipa do |options|
    build_app(
    export_method: (options[:release] ? "app-store" : "ad-hoc"),
    skip_build_archive: true,
    archive_path: "../build/ios/archive/Runner.xcarchive",
    export_team_id: CredentialsManager::AppfileConfig.try_fetch_value(:team_id)
    )
  end

 desc "Ship to testflight"
 lane :ship_to_testflight do
   load_asc_api_key
   prepare_signing(release: true)
   build_ipa(release: true)
   upload_release
 end

 desc "Generate ad-hoc build"
  lane :ad_hoc_build do
    load_asc_api_key
    prepare_signing(release: false)
    build_ipa(release: false)
  end
end
