name: iOS Non-Fastlane Release

on:
  workflow_dispatch:
    inputs:
      tramline-input:
        required: false

jobs:
  deploy:
    runs-on: macos-15

    steps:
      - name: Configure Tramline
        id: tramline
        uses: tramlinehq/deploy-action@v0.1.7
        with:
          input: ${{ github.event.inputs.tramline-input }}

      - uses: actions/setup-java@v3
        with:
          distribution: "zulu"
          java-version: 11
          cache: "gradle"

      # Setup the flutter environment.
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.22.0"
          channel: "stable"
          cache: true

      - name: Setup Xcode and iOS Platform
        run: |
          echo "Available Xcode versions:"
          ls /Applications | grep Xcode
          echo "Current Xcode version:"
          xcodebuild -version

          # Select latest available Xcode 16.x
          if [ -d "/Applications/Xcode_16.4.app" ]; then
            sudo xcode-select -s /Applications/Xcode_16.4.app/Contents/Developer
          elif [ -d "/Applications/Xcode_16.3.app" ]; then
            sudo xcode-select -s /Applications/Xcode_16.3.app/Contents/Developer
          elif [ -d "/Applications/Xcode_16.2.app" ]; then
            sudo xcode-select -s /Applications/Xcode_16.2.app/Contents/Developer
          elif [ -d "/Applications/Xcode_16.1.app" ]; then
            sudo xcode-select -s /Applications/Xcode_16.1.app/Contents/Developer
          elif [ -d "/Applications/Xcode_16.0.app" ]; then
            sudo xcode-select -s /Applications/Xcode_16.0.app/Contents/Developer
          fi

          echo "Selected Xcode version:"
          xcodebuild -version

          # Install iOS 18.0 platform if not available
          echo "Installing iOS 18.0 platform..."
          sudo xcodebuild -downloadPlatform iOS

      - run: flutter pub get

      - name: Install private API key P8
        env:
          PRIVATE_API_KEY_BASE64: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
          API_KEY: ${{ secrets.APPSTORE_API_KEY_ID }}
        run: |
          mkdir -p ~/private_keys
          echo -n "$PRIVATE_API_KEY_BASE64" | base64 --decode --output ~/private_keys/AuthKey_$API_KEY.p8

      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Build the app
        run: |
          # show codesign identities
          security find-identity -v -p codesigning

          # build without signing
          flutter build ios --release --build-number=${{ github.event.inputs.versionCode }} --build-name=${{ github.event.inputs.versionName }} --no-codesign --dart-define=BUGSNAG_API_KEY=${{ secrets.BUGSNAG_API_KEY }}

      - name: Build xArchive and sign
        run: |
          xcodebuild -workspace ios/Runner.xcworkspace -scheme Runner -configuration Release DEVELOPMENT_TEAM=VF4NQ93FG5 -sdk 'iphoneos' -destination 'generic/platform=iOS' -archivePath build-output/Runner.xcarchive PROVISIONING_PROFILE=fccab5a7-119a-4a44-a3a3-7c63e853b12d clean archive CODE_SIGN_IDENTITY="iPhone Distribution: Akshay Gupta (VF4NQ93FG5)"

      - name: Export ipa
        run: |
          xcodebuild -exportArchive -archivePath build-output/Runner.xcarchive -exportPath build-output/ios -exportOptionsPlist ios/exportOptions.plist

      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision

      - name: Upload app to TestFlight
        env:
          API_KEY: ${{ secrets.APPSTORE_API_KEY_ID }}
          API_ISSUER: ${{ secrets.APPSTORE_ISSUER_ID }}
          APP_PATH: build-output/ios/*.ipa
        run: |
          xcrun altool --upload-app --type ios -f $APP_PATH --apiKey $API_KEY --apiIssuer $API_ISSUER

      - name: Publish iOS Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-ios
          path: build-output/ios
